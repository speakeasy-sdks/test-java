/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package vitor_test.Acme_Go;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import vitor_test.Acme_Go.utils.HTTPClient;
import vitor_test.Acme_Go.utils.HTTPRequest;
import vitor_test.Acme_Go.utils.JSON;
import vitor_test.Acme_Go.utils.SerializedBody;
import vitor_test.Acme_Go.utils.SpeakeasyHTTPClient;

/**
 * User API for Speakeasy template service: The Rest Template API is an API used for instrucitonal purposes.
 */
public class AcmeGo {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "http://localhost:8080",
	};
	
	
	
	
	
	
  		

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = vitor_test.Acme_Go.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public AcmeGo build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new AcmeGo(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private AcmeGo(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Create user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public vitor_test.Acme_Go.models.operations.CreateUserv1Response createUserv1(vitor_test.Acme_Go.models.shared.UserInput request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = vitor_test.Acme_Go.utils.Utils.generateURL(baseUrl, "/v1/user");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = vitor_test.Acme_Go.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        vitor_test.Acme_Go.models.operations.CreateUserv1Response res = new vitor_test.Acme_Go.models.operations.CreateUserv1Response(contentType, httpRes.statusCode()) {{
            user = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.User.class);
                res.user = out;
            }
        }
        else {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.Error.class);
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Delete a user by ID
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public vitor_test.Acme_Go.models.operations.DeleteUserv1Response deleteUserv1(vitor_test.Acme_Go.models.operations.DeleteUserv1Request request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = vitor_test.Acme_Go.utils.Utils.generateURL(vitor_test.Acme_Go.models.operations.DeleteUserv1Request.class, baseUrl, "/v1/user/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        vitor_test.Acme_Go.models.operations.DeleteUserv1Response res = new vitor_test.Acme_Go.models.operations.DeleteUserv1Response(contentType, httpRes.statusCode()) {{
            success = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.Success out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.Success.class);
                res.success = out;
            }
        }
        else {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.Error.class);
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Healthcheck
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public vitor_test.Acme_Go.models.operations.GetHealthResponse getHealth() throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = vitor_test.Acme_Go.utils.Utils.generateURL(baseUrl, "/health");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        vitor_test.Acme_Go.models.operations.GetHealthResponse res = new vitor_test.Acme_Go.models.operations.GetHealthResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.Error.class);
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get a user by ID
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public vitor_test.Acme_Go.models.operations.GetUserv1Response getUserv1(vitor_test.Acme_Go.models.operations.GetUserv1Request request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = vitor_test.Acme_Go.utils.Utils.generateURL(vitor_test.Acme_Go.models.operations.GetUserv1Request.class, baseUrl, "/v1/user/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        vitor_test.Acme_Go.models.operations.GetUserv1Response res = new vitor_test.Acme_Go.models.operations.GetUserv1Response(contentType, httpRes.statusCode()) {{
            user = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.User.class);
                res.user = out;
            }
        }
        else {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.Error.class);
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Search users
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public vitor_test.Acme_Go.models.operations.SearchUsersv1Response searchUsersv1(vitor_test.Acme_Go.models.shared.Filters request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = vitor_test.Acme_Go.utils.Utils.generateURL(baseUrl, "/v1/users/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = vitor_test.Acme_Go.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        vitor_test.Acme_Go.models.operations.SearchUsersv1Response res = new vitor_test.Acme_Go.models.operations.SearchUsersv1Response(contentType, httpRes.statusCode()) {{
            users = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.Users out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.Users.class);
                res.users = out;
            }
        }

        return res;
    }

    public vitor_test.Acme_Go.models.operations.UpdateUserv1Response updateUserv1(vitor_test.Acme_Go.models.operations.UpdateUserv1Request request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = vitor_test.Acme_Go.utils.Utils.generateURL(vitor_test.Acme_Go.models.operations.UpdateUserv1Request.class, baseUrl, "/v1/user/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = vitor_test.Acme_Go.utils.Utils.serializeRequestBody(request, "userInput", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        vitor_test.Acme_Go.models.operations.UpdateUserv1Response res = new vitor_test.Acme_Go.models.operations.UpdateUserv1Response(contentType, httpRes.statusCode()) {{
            user = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.User.class);
                res.user = out;
            }
        }
        else {
            if (vitor_test.Acme_Go.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                vitor_test.Acme_Go.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), vitor_test.Acme_Go.models.shared.Error.class);
                res.error = out;
            }
        }

        return res;
    }
}